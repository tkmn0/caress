// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Mon, 11 Jan 2021 08:30:34 JST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package opus

/*
#cgo CFLAGS: -I /usr/local/include/opus
#cgo LDFLAGS: -L /usr/local/lib -l opus
#include "opus.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"fmt"
	"sync"
	"unsafe"
)

// Ref returns a reference to C object as it is.
func (x *Encoder) Ref() *C.OpusEncoder {
	if x == nil {
		return nil
	}
	return (*C.OpusEncoder)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Encoder) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewEncoderRef converts the C object reference into a raw struct reference without wrapping.
func NewEncoderRef(ref unsafe.Pointer) *Encoder {
	return (*Encoder)(ref)
}

// NewEncoder allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewEncoder() *Encoder {
	return (*Encoder)(allocEncoderMemory(1))
}

// allocEncoderMemory allocates memory for type C.OpusEncoder in C.
// The caller is responsible for freeing the this memory via C.free.
func allocEncoderMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfEncoderValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfEncoderValue = unsafe.Sizeof([1]C.OpusEncoder{})

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Encoder) PassRef() *C.OpusEncoder {
	if x == nil {
		x = (*Encoder)(allocEncoderMemory(1))
	}
	return (*C.OpusEncoder)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Decoder) Ref() *C.OpusDecoder {
	if x == nil {
		return nil
	}
	return (*C.OpusDecoder)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Decoder) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewDecoderRef converts the C object reference into a raw struct reference without wrapping.
func NewDecoderRef(ref unsafe.Pointer) *Decoder {
	return (*Decoder)(ref)
}

// NewDecoder allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewDecoder() *Decoder {
	return (*Decoder)(allocDecoderMemory(1))
}

// allocDecoderMemory allocates memory for type C.OpusDecoder in C.
// The caller is responsible for freeing the this memory via C.free.
func allocDecoderMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfDecoderValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfDecoderValue = unsafe.Sizeof([1]C.OpusDecoder{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Decoder) PassRef() *C.OpusDecoder {
	if x == nil {
		x = (*Decoder)(allocDecoderMemory(1))
	}
	return (*C.OpusDecoder)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Repacketizer) Ref() *C.OpusRepacketizer {
	if x == nil {
		return nil
	}
	return (*C.OpusRepacketizer)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Repacketizer) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRepacketizerRef converts the C object reference into a raw struct reference without wrapping.
func NewRepacketizerRef(ref unsafe.Pointer) *Repacketizer {
	return (*Repacketizer)(ref)
}

// NewRepacketizer allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRepacketizer() *Repacketizer {
	return (*Repacketizer)(allocRepacketizerMemory(1))
}

// allocRepacketizerMemory allocates memory for type C.OpusRepacketizer in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRepacketizerMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRepacketizerValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRepacketizerValue = unsafe.Sizeof([1]C.OpusRepacketizer{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Repacketizer) PassRef() *C.OpusRepacketizer {
	if x == nil {
		x = (*Repacketizer)(allocRepacketizerMemory(1))
	}
	return (*C.OpusRepacketizer)(unsafe.Pointer(x))
}

type sliceHeader struct {
	Data unsafe.Pointer
	Len  int
	Cap  int
}

// unpackPUcharString represents the data from Go string as *C.uchar and avoids copying.
func unpackPUcharString(str string) (*C.uchar, *cgoAllocMap) {
	h := (*stringHeader)(unsafe.Pointer(&str))
	return (*C.uchar)(h.Data), cgoAllocsUnknown
}

type stringHeader struct {
	Data unsafe.Pointer
	Len  int
}

// packPCharString creates a Go string backed by *C.char and avoids copying.
func packPCharString(p *C.char) (raw string) {
	if p != nil && *p != 0 {
		h := (*stringHeader)(unsafe.Pointer(&raw))
		h.Data = unsafe.Pointer(p)
		for *p != 0 {
			p = (*C.char)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 1)) // p++
		}
		h.Len = int(uintptr(unsafe.Pointer(p)) - uintptr(h.Data))
	}
	return
}

// RawString reperesents a string backed by data on the C side.
type RawString string

// Copy returns a Go-managed copy of raw string.
func (raw RawString) Copy() string {
	if len(raw) == 0 {
		return ""
	}
	h := (*stringHeader)(unsafe.Pointer(&raw))
	return C.GoStringN((*C.char)(h.Data), C.int(h.Len))
}
